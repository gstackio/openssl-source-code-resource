---
#
# ci/pipeline.yml
#
# Pipeline structure file for a Docker Image pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
#          Dennis Bell <dennis.j.bell@gmail.com>
# created: 2016-03-04

meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  image:
    name: starkandwayne/concourse
    tag: latest
    registry:
      username: (( param "Please set your Docker registry username for your pipeline image" ))
      password: (( param "Please set your Docker registry password for your pipeline image" ))

  aws:
    bucket:     (( concat meta.name "-pipeline" ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID" ))
    secret_key: (( param "Please set your AWS Secret Key ID" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token and specify it here" ))

  dockerhub:
    username:   (( param "Please specify the username for your Dockerhub account" ))
    password:   (( param "Please specify the password for your Dockerhub account" ))
    repository: (( param "Please specify the name of the image (repo/name) that you are building" ))

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    notification: '(( concat ":concourse-fail: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to build " meta.name "!  Click for details.>" ))'
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png

groups:
  - name: (( grab meta.name ))
    jobs:
      - build
      - promote
      - minor
      - major

jobs:
  - name: build
    public: true
    serial: true
    plan:
      - get: git
        trigger: true
      - put: edge
        params: { build: git }
        on_failure:
          put: notify
          params:
            channel:  (( grab meta.slack.channel ))
            username: (( grab meta.slack.username ))
            icon_url: (( grab meta.slack.icon ))
            text:     (( grab meta.slack.notification ))

  - name: minor
    public: true
    plan:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }

  - name: major
    public: true
    plan:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }

  - name: promote
    public: true
    serial: true
    plan:
      - in_parallel:
          - { get: version }
          - { get: edge, passed: [build], params: { save: true } }
          - { get: git,  passed: [build] }
          - { get: image }

      - task: release
        image: image
        config:
          platform: linux
          inputs:
            - name: git
            - name: version
          outputs:
            - name: gh
            - name: pushme
          run:
            path: ./git/ci/scripts/release
            args: []
          params:
            REPO_ROOT:    git
            RELEASE_ROOT: gh
            RELEASE_NAME: (( grab meta.release ))
            REPO_OUT:     pushme/git
            VERSION_FROM: version/number
            GIT_EMAIL:    (( grab meta.git.email ))
            GIT_NAME:     (( grab meta.git.name ))

      - put: latest
        params:
          tag:           version/number
          tag_prefix:    v
          load:          edge
          tag_as_latest: true

      - put: version
        params:
          bump: patch
      - put: git
        params:
          rebase: true
          repository: pushme/git
      - put: github
        params:
          name: gh/name
          tag:  gh/tag
          body: gh/notes.md

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
  - name: image
    type: docker-image
    source:
      repository: (( grab meta.image.name ))
      tag:        (( grab meta.image.tag ))
      username:   (( grab meta.image.registry.username ))
      password:   (( grab meta.image.registry.password ))

  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: edge
    type: docker-image
    source:
      .: (( inject meta.dockerhub ))
      tag: edge

  - name: latest
    type: docker-image
    source:
      .: (( inject meta.dockerhub ))
      tag: latest

  - name: version
    type: semver
    source:
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               version
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
